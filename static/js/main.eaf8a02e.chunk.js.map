{"version":3,"sources":["components/Navbar.tsx","App.tsx","api.ts","types/ErrorMessages.tsx","types/SortField.ts","utils/constants.ts","utils/functions.ts","PeopleContext.tsx","components/HomePage.tsx","utils/searchHelper.ts","types/PersonSex.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PersonRow.tsx","components/TableHeader.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","components/NotFoundPage.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navigation","useSearchParams","params","className","role","to","toString","App","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","ErrorMessages","SortField","SEX_FEMALE","SEX_MALE","CENTURIES_ARRAY","INITIAL_PARAMS","query","centuries","sex","TABLE_COLUMNS","checkQueryMatch","name","toLowerCase","includes","PeopleContext","React","createContext","peopleList","isLoading","errorMessage","PostsProvider","children","useState","setPeopleList","setIsLoading","NoError","setErrorMessage","useEffect","getPeople","peopleFromServer","map","person","mother","find","motherName","father","fatherName","getPreparedPeople","catch","LoadError","finally","value","useMemo","Provider","HomePage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","delete","Array","isArray","part","append","set","PersonSex","SearchLink","props","searchParams","search","getCenturies","century","filter","number","PeopleFilters","setSearchParams","get","getAll","All","Male","Female","type","placeholder","onChange","event","target","Loader","PersonLink","slug","PersonRow","peopleSlug","born","died","TableHeader","sort","order","isOrderDescending","setOrder","column","setSortField","lowerColumn","isColumnSorting","PeopleTable","useContext","useParams","filteredPeople","normalizedQuery","trim","length","Math","ceil","personA","personB","Name","Sex","localeCompare","Born","Died","reverse","getFilteredPeople","NoMatch","PeoplePage","SomethingWentWrong","NoPeople","NotFoundPage","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.eaf8a02e.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink, useSearchParams } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item', {\n    'has-background-grey-lighter': isActive,\n  },\n);\n\nexport const Navigation = () => {\n  const [params] = useSearchParams();\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n\n          <NavLink\n            to={`/people?${params.toString()}`}\n            className={getLinkClass}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport { Outlet } from 'react-router-dom';\n\nimport './App.scss';\nimport { Navigation } from './components/Navbar';\n\nexport const App: React.FC = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navigation />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export enum ErrorMessages {\n  NoError = '',\n  LoadError = 'Unable to load people',\n  SomethingWentWrong = 'Something went wrong',\n  NoPeople = 'There are no people on the server',\n  NoMatch = 'There are no people matching the current search criteria',\n}\n","export enum SortField {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","export const COLUMN_NAMES = ['Name', 'Sex', 'Born', 'Died', 'Mother', 'Father'];\nexport const NO_PARENT = '-';\nexport const SEX_FEMALE = 'f';\nexport const SEX_MALE = 'm';\nexport const CENTURIES_ARRAY = ['16', '17', '18', '19', '20'];\nexport const INITIAL_PARAMS = {\n  query: null,\n  centuries: null,\n  sex: null,\n};\nexport const TABLE_COLUMNS = ['Name', 'Sex', 'Born', 'Died'];\n","import { Person } from '../types';\nimport { SortField } from '../types/SortField';\nimport { SEX_FEMALE, SEX_MALE } from './constants';\n\ninterface FilterParams {\n  sex: string | null;\n  query: string;\n  centuries: string[];\n  sort: string | null;\n  order: string | null;\n}\n\nconst CENTURY = 100;\n\nconst checkQueryMatch = (name: string | null, query: string) => {\n  return name?.toLowerCase().includes(query);\n};\n\nexport const getPreparedPeople = (peopleList: Person[]) => {\n  return peopleList.map(person => {\n    return {\n      ...person,\n      mother: peopleList.find(({ name }) => name === person.motherName),\n      father: peopleList.find(({ name }) => name === person.fatherName),\n    };\n  });\n};\n\nexport const getFilteredPeople = (peopleList: Person[], {\n  sex, query, centuries, sort, order,\n}: FilterParams) => {\n  let filteredPeople = peopleList;\n\n  if (sex === SEX_MALE) {\n    filteredPeople = filteredPeople.filter(person => person.sex === SEX_MALE);\n  }\n\n  if (sex === SEX_FEMALE) {\n    filteredPeople = filteredPeople.filter(person => person.sex === SEX_FEMALE);\n  }\n\n  if (query) {\n    filteredPeople = filteredPeople.filter(person => {\n      const normalizedQuery = query.trim().toLowerCase();\n\n      if (normalizedQuery === '') {\n        return false;\n      }\n\n      const name = checkQueryMatch(person.name, normalizedQuery);\n      const motherName = checkQueryMatch(person.motherName, normalizedQuery);\n      const fatherName = checkQueryMatch(person.fatherName, normalizedQuery);\n\n      return name || motherName || fatherName;\n    });\n  }\n\n  if (centuries.length) {\n    filteredPeople = filteredPeople.filter(person => {\n      const century = `${Math.ceil(person.born / CENTURY)}`;\n\n      return centuries.includes(century);\n    });\n  }\n\n  filteredPeople = [...filteredPeople].sort((personA, personB) => {\n    switch (sort) {\n      case SortField.Name:\n      case SortField.Sex:\n        return personA[sort].localeCompare(personB[sort]);\n\n      case SortField.Born:\n      case SortField.Died:\n        return personA[sort] - personB[sort];\n\n      default:\n        return 0;\n    }\n  });\n\n  if (order) {\n    filteredPeople.reverse();\n  }\n\n  return filteredPeople;\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { Person } from './types';\nimport { getPeople } from './api';\nimport { ErrorMessages } from './types/ErrorMessages';\nimport { getPreparedPeople } from './utils/functions';\n\ninterface PeopleContextType {\n  peopleList: Person[];\n  isLoading: boolean;\n  errorMessage: string;\n}\n\nexport const PeopleContext = React.createContext<PeopleContextType>({\n  peopleList: [],\n  isLoading: false,\n  errorMessage: '',\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PostsProvider: React.FC<Props> = ({ children }) => {\n  const [peopleList, setPeopleList] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(ErrorMessages.NoError);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then((peopleFromServer) => {\n        setPeopleList(getPreparedPeople(peopleFromServer));\n      })\n      .catch(() => {\n        setErrorMessage(ErrorMessages.LoadError);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const value = useMemo(() => ({\n    peopleList,\n    isLoading,\n    errorMessage,\n  }), [peopleList, isLoading, errorMessage]);\n\n  return (\n    <PeopleContext.Provider value={value}>\n      {children}\n    </PeopleContext.Provider>\n  );\n};\n","import React from 'react';\n\nexport const HomePage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","export enum PersonSex {\n  Male = 'Male',\n  Female = 'Female',\n  All = 'All',\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { PersonSex } from '../types/PersonSex';\nimport {\n  SEX_FEMALE, SEX_MALE, CENTURIES_ARRAY, INITIAL_PARAMS,\n} from '../utils/constants';\nimport { SearchLink } from './SearchLink';\n\nconst getCenturies = (centuries: string[], century: string) => {\n  const filteredCenturies = centuries.includes(century)\n    ? centuries.filter(number => number !== century)\n    : [...centuries, century];\n\n  return { centuries: filteredCenturies };\n};\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || null;\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const paramsToUpdate = { query: event.target.value || null };\n\n    const search = getSearchWith(searchParams, paramsToUpdate);\n\n    setSearchParams(search);\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': sex === null })}\n          params={{ sex: null }}\n        >\n          {PersonSex.All}\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': sex === SEX_MALE })}\n          params={{ sex: SEX_MALE }}\n        >\n          {PersonSex.Male}\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': sex === SEX_FEMALE })}\n          params={{ sex: SEX_FEMALE }}\n        >\n          {PersonSex.Female}\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES_ARRAY.map(century => (\n              <SearchLink\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={getCenturies(centuries, century)}\n                key={century}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={INITIAL_PARAMS}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { SEX_FEMALE } from '../utils/constants';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { name, sex, slug } = person;\n  const [params] = useSearchParams();\n\n  return (\n    <Link\n      className={classNames({\n        'has-text-danger': sex === SEX_FEMALE,\n      })}\n      to={`/people/${slug}?${params.toString()}`}\n    >\n      {name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { PersonLink } from './PersonLink';\nimport { Person } from '../types';\nimport { NO_PARENT } from '../utils/constants';\n\ntype Props = {\n  person: Person,\n  peopleSlug: string | undefined,\n};\n\nexport const PersonRow: React.FC<Props> = ({ person, peopleSlug }) => {\n  const {\n    slug,\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n    mother,\n    father,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': peopleSlug === slug,\n      })}\n    >\n      <td><PersonLink person={person} /></td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || NO_PARENT\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || NO_PARENT\n        )}\n      </td>\n    </tr>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { TABLE_COLUMNS } from '../utils/constants';\n\nexport const TableHeader: React.FC = () => {\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort') || null;\n  const order = searchParams.get('order') || null;\n\n  const isOrderDescending = order === 'desc';\n\n  const setOrder = (column: string) => {\n    if (sort === column) {\n      return order ? null : 'desc';\n    }\n\n    return null;\n  };\n\n  const setSortField = (column: string) => {\n    if (sort === column && isOrderDescending) {\n      return null;\n    }\n\n    return column;\n  };\n\n  return (\n    <thead>\n      <tr>\n        {TABLE_COLUMNS.map(column => {\n          const lowerColumn = column.toLowerCase();\n          const isColumnSorting = sort === lowerColumn;\n\n          return (\n            <th key={column}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {column}\n                <SearchLink\n                  params={{\n                    sort: setSortField(lowerColumn) || null,\n                    order: setOrder(lowerColumn) || null,\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('fas', {\n                      'fa-sort': !isColumnSorting,\n                      'fa-sort-up': isColumnSorting && !isOrderDescending,\n                      'fa-sort-down': isColumnSorting && isOrderDescending,\n                    })}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          );\n        })}\n\n        <th>Mother</th>\n        <th>Father</th>\n      </tr>\n    </thead>\n  );\n};\n","import React, { useContext } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { PeopleContext } from '../PeopleContext';\nimport { PersonRow } from './PersonRow';\nimport { getFilteredPeople } from '../utils/functions';\nimport { TableHeader } from './TableHeader';\nimport { ErrorMessages } from '../types/ErrorMessages';\n\nexport const PeopleTable: React.FC = () => {\n  const { peopleList } = useContext(PeopleContext);\n  const [searchParams] = useSearchParams();\n\n  const { peopleSlug } = useParams();\n\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex');\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || null;\n  const order = searchParams.get('order') || null;\n\n  const filteredPeople = getFilteredPeople(peopleList, {\n    sex, query, centuries, sort, order,\n  });\n\n  return (\n    <>\n      {!filteredPeople.length && (\n        <p>\n          {ErrorMessages.NoMatch}\n        </p>\n      )}\n\n      <table\n        data-cy=\"peopleTable\"\n        className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n      >\n        <TableHeader />\n\n        <tbody>\n          {filteredPeople.map(person => (\n            <PersonRow\n              person={person}\n              peopleSlug={peopleSlug}\n              key={person.slug}\n            />\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React, { useContext } from 'react';\nimport { PeopleContext } from '../PeopleContext';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { ErrorMessages } from '../types/ErrorMessages';\nimport { PeopleTable } from './PeopleTable';\n\nexport const PeoplePage: React.FC = () => {\n  const { peopleList, isLoading, errorMessage } = useContext(PeopleContext);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!!peopleList.length && (\n              <PeopleFilters />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (<Loader />)}\n\n              {errorMessage === ErrorMessages.LoadError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {ErrorMessages.SomethingWentWrong}\n                </p>\n              )}\n\n              {(!peopleList.length && !isLoading) && (\n                <p data-cy=\"noPeopleMessage\">\n                  {ErrorMessages.NoPeople}\n                </p>\n              )}\n\n              {!!peopleList.length && (\n                <PeopleTable />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter, Navigate, Route, Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PostsProvider } from './PeopleContext';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <PostsProvider>\n      <HashRouter>\n        <Routes>\n          <Route path=\"/\" element={<App />}>\n            <Route index element={<HomePage />} />\n            <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"people/:peopleSlug?\" element={<PeoplePage />} />\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Route>\n        </Routes>\n      </HashRouter>\n    </PostsProvider>,\n  );\n"],"sourceRoot":""}